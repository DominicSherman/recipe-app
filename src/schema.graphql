### This file was generated by Nexus Schema
### Do not make changes to this file directly

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneRecipe(data: RecipeCreateInput!): Recipe!
  deleteOneRecipe(where: RecipeWhereUniqueInput!): Recipe
  updateOneRecipe(
    data: RecipeUpdateInput!
    where: RecipeWhereUniqueInput!
  ): Recipe
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(
    after: RecipeWhereUniqueInput
    before: RecipeWhereUniqueInput
    first: Int
    last: Int
    where: RecipeWhereInput
  ): [Recipe!]!
  user(where: UserWhereUniqueInput!): User
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

"""
A Recipe
"""
type Recipe {
  cookTime: String
  createdAt: DateTime!
  description: String
  id: String!
  text: String
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input RecipeCreateInput {
  cookTime: String
  createdAt: DateTime
  description: String
  id: String
  text: String
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutRecipesInput!
}

input RecipeListRelationFilter {
  every: RecipeWhereInput
  none: RecipeWhereInput
  some: RecipeWhereInput
}

input RecipeUpdateInput {
  cookTime: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRecipesInput
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  cookTime: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  text: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input RecipeWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
A User
"""
type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: Int!
  image: String
  name: String
  updatedAt: DateTime!
}

input UserCreateNestedOneWithoutRecipesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRecipesInput
  create: UserCreateWithoutRecipesInput
}

input UserCreateOrConnectWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutRecipesInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutRecipesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRecipesInput
  create: UserCreateWithoutRecipesInput
  update: UserUpdateWithoutRecipesInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdateWithoutRecipesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput!
  update: UserUpdateWithoutRecipesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Recipes: RecipeListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
